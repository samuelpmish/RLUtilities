#include "pitch.h"
#include "resource.h"

#include <sstream>
#include <fstream>
#include <iostream>
#include <iomanip>

extern uint32_t mesh_data[72252];

Pitch::Pitch() {

  std::string filename("pitch.dat");
  std::ifstream infile(filename);

  if (!infile.good()) {

    std::cout << "file not found" << std::endl;
    exit(1);

  } else {

  #if 0
    tri * tri_ptr = (tri*)mesh_data;
    triangles = std::vector < tri >(tri_ptr, tri_ptr + 8028);
  #else

    tri t;
    std::string line;

    while (std::getline(infile, line)) {       
  
      std::stringstream ss(line); 
      
      ss >> t.p[0][0]; 
      ss >> t.p[0][1]; 
      ss >> t.p[0][2];
  
      ss >> t.p[1][0];
      ss >> t.p[1][1];
      ss >> t.p[1][2];
  
      ss >> t.p[2][0];
      ss >> t.p[2][1];
      ss >> t.p[2][2];
  
      triangles.push_back(t);
  
    }
#endif
  
    infile.close(); 


    std::cout << "successfully read " << triangles.size() << " triangles" << std::endl;

    mesh = bvh < tri >(triangles); 

    std::ofstream outfile("mesh.dat");

    uint32_t * ptr = (uint32_t*)&triangles[0];  

    for (int i = 0; i < 8028; i++) {
      for (int j = 0; j < 9; j++) {
        outfile << std::hex << "0x" << ptr[i * 9 + j];
        outfile << ((j != 8) ? ", " : ",\n");
      }
    }

    // outfile.write((char*)&triangles[0], sizeof(tri) * triangles.size());
    // outfile.close();

  }

}

bool Pitch::in_contact_with(const sphere & s) {

  hits = mesh.intersect(s);
  return hits.size() > 0;

}

bool Pitch::in_contact_with(const obb & o) {

  hits = mesh.intersect(o);
  return hits.size() > 0;

}

ray Pitch::last_contact_info() {

  float count = 0;
  vec3 pos{0.0f, 0.0f, 0.0f};
  vec3 normal{0.0f, 0.0f, 0.0f};

  for (int i = 0; i < hits.size(); i++) {
    normal += triangles[hits[i]].unit_normal();
    pos += triangles[hits[i]].center();
    count++;
  }

  return ray{pos / count, normalize(normal)};

}

vec3 closest_point_on_side(const vec3 & v) {
  return vec3{v[0], v[1], 4096.0f * sgn(v[2])};
}
